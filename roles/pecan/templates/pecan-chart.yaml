---
# Source: pecan/charts/betydb/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: pecan-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.9.9
    release: "pecan"
    heritage: "Helm"
type: Opaque
data:
  postgresql-password: "c3VwZXJzZWNyZXQ="
---
# Source: pecan/charts/betydb/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: pecan-betydb
  labels:
    app.kubernetes.io/name: betydb
    helm.sh/chart: betydb-0.5.4
    app.kubernetes.io/instance: pecan
    app.kubernetes.io/version: "5.4.1"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  betyPassword:  "YmV0eQ=="
  postgresqlPassword: c3VwZXJzZWNyZXQ=
  secretKey:  "dGhpc2lzbm90YXNlY3JldA=="
---
# Source: pecan/charts/rabbitmq/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: pecan-rabbitmq
  namespace: software-application-innovation-lab-sail-projects-fcd6dfa
  labels:
    app: rabbitmq
    chart: rabbitmq-6.28.1
    release: "pecan"
    heritage: "Helm"
type: Opaque
data:

  rabbitmq-password: "Z3Vlc3Q="


  rabbitmq-erlang-cookie: "MTIzNHRoaXNpc2FzdXBlcnNlY3JldG9mbGVuZ3RoMzI="
---
# Source: pecan/charts/rabbitmq/templates/configuration.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: pecan-rabbitmq-config
  namespace: software-application-innovation-lab-sail-projects-fcd6dfa
  labels:
    app: rabbitmq
    chart: rabbitmq-6.28.1
    release: "pecan"
    heritage: "Helm"
data:
  enabled_plugins: |-
    [rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap].
  rabbitmq.conf: |-
    ##username and password
    default_user=guest
    default_pass=CHANGEME
    ## Clustering
    ##
    cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
    cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
    cluster_formation.node_cleanup.interval = 10
    cluster_formation.node_cleanup.only_log_warning = true
    cluster_partition_handling = autoheal
    # queue master locator
    queue_master_locator=min-masters
    # enable guest user
    loopback_users.guest = false
    #disk_free_limit.absolute = 50MB
    #management.load_definitions = /app/load_definition.json
---
# Source: pecan/charts/rabbitmq/templates/healthchecks.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: pecan-rabbitmq-healthchecks
  namespace: software-application-innovation-lab-sail-projects-fcd6dfa
  labels:
    app: rabbitmq
    chart: rabbitmq-6.28.1
    release: "pecan"
    heritage: "Helm"
data:
  rabbitmq-health-check: |-
    #!/bin/sh
    START_FLAG=/opt/bitnami/rabbitmq/var/lib/rabbitmq/.start
    if [ -f ${START_FLAG} ]; then
        rabbitmqctl node_health_check
        RESULT=$?
        if [ $RESULT -ne 0 ]; then
          rabbitmqctl status
          exit $?
        fi
        rm -f ${START_FLAG}
        exit ${RESULT}
    fi
    rabbitmq-api-check $1 $2
  rabbitmq-api-check: |-
    #!/bin/sh
    set -e
    URL=$1
    EXPECTED=$2
    ACTUAL=$(curl --silent --show-error --fail "${URL}")
    echo "${ACTUAL}"
    test "${EXPECTED}" = "${ACTUAL}"
---
# Source: pecan/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: pecan-config
  labels:
    app.kubernetes.io/name: pecan
    helm.sh/chart: pecan-0.6.2
    app.kubernetes.io/instance: pecan
    app.kubernetes.io/version: "1.7.2"
    app.kubernetes.io/managed-by: Helm
data:
  database.yaml: |-
    production:
      adapter: postgis
      encoding: utf8
      reconnect: false
      database: <%= ENV['BETYDATABASE'] %>
      pool: 5
      username: <%= ENV['BETYUSER'] %>
      password: <%= ENV['BETYPASSWORD'] %>
      host: postgis
      port: 5432
  nginx.conf: |-
    map $http_upgrade $connection_upgrade {
      default upgrade;
      ''      close;
    }

    server {
      listen 80;

      location /rstudio/ {
        rewrite ^/rstudio/(.*)$ /$1 break;
        proxy_pass http://localhost:8787;
        proxy_redirect http://localhost:8787/ $scheme://$http_host/rstudio/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_read_timeout 20d;
      }
    }
---
# Source: pecan/templates/persistence.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pecan-data
  labels:
    app.kubernetes.io/name: pecan
    helm.sh/chart: pecan-0.6.2
    app.kubernetes.io/instance: pecan
    app.kubernetes.io/version: "1.7.2"
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "20Gi"
  volumeMode: Filesystem
---
# Source: pecan/charts/betydb/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: pecan-postgresql-headless
  labels:
    app: postgresql
    chart: postgresql-8.9.9
    release: "pecan"
    heritage: "Helm"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "pecan"
---
# Source: pecan/charts/betydb/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: pecan-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.9.9
    release: "pecan"
    heritage: "Helm"
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "pecan"
    role: master
---
# Source: pecan/charts/betydb/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: pecan-betydb
  labels:
    app.kubernetes.io/name: betydb
    helm.sh/chart: betydb-0.5.4
    app.kubernetes.io/instance: pecan
    app.kubernetes.io/version: "5.4.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: bety
      port: 8000
      targetPort: bety
      protocol: TCP
  selector:
    app.kubernetes.io/name: betydb
    app.kubernetes.io/instance: pecan
---
# Source: pecan/charts/rabbitmq/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: pecan-rabbitmq-headless
  namespace: software-application-innovation-lab-sail-projects-fcd6dfa
  labels:
    app: rabbitmq
    chart: rabbitmq-6.28.1
    release: "pecan"
    heritage: "Helm"
spec:
  clusterIP: None
  ports:
    - name: epmd
      port: 4369
      targetPort: epmd
    - name: amqp
      port: 5672
      targetPort: amqp
    - name: dist
      port: 25672
      targetPort: dist
    - name: stats
      port: 15672
      targetPort: stats
  selector:
    app: rabbitmq
    release: "pecan"
---
# Source: pecan/charts/rabbitmq/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: pecan-rabbitmq
  namespace: software-application-innovation-lab-sail-projects-fcd6dfa
  labels:
    app: rabbitmq
    chart: rabbitmq-6.28.1
    release: "pecan"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
    - name: epmd
      port: 4369
      targetPort: epmd
      nodePort: null
    - name: amqp
      port: 5672
      targetPort: amqp
      nodePort: null
    - name: dist
      port: 25672
      targetPort: dist
      nodePort: null
    - name: stats
      port: 15672
      targetPort: stats
      nodePort: null
  selector:
    app: rabbitmq
    release: "pecan"
---
# Source: pecan/templates/docs/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: pecan-docs
  labels:
    app.kubernetes.io/name: pecan
    helm.sh/chart: pecan-0.6.2
    app.kubernetes.io/instance: pecan
    app.kubernetes.io/version: "1.7.2"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: pecan-docs
      port: 8000
      targetPort: pecan-docs
      protocol: TCP
  selector:
    app.kubernetes.io/name: pecan-docs
    app.kubernetes.io/instance: pecan
---
# Source: pecan/templates/monitor/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: pecan-monitor
  labels:
    app.kubernetes.io/name: pecan
    helm.sh/chart: pecan-0.6.2
    app.kubernetes.io/instance: pecan
    app.kubernetes.io/version: "1.7.2"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: pecan-monitor
      port: 9999
      targetPort: pecan-monitor
      protocol: TCP
  selector:
    app.kubernetes.io/name: pecan-monitor
    app.kubernetes.io/instance: pecan
---
# Source: pecan/templates/web/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: pecan-web
  labels:
    app.kubernetes.io/name: pecan
    helm.sh/chart: pecan-0.6.2
    app.kubernetes.io/instance: pecan
    app.kubernetes.io/version: "1.7.2"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: pecan-web
      port: 8888
      targetPort: pecan-web
      protocol: TCP
  selector:
    app.kubernetes.io/name: pecan-web
    app.kubernetes.io/instance: pecan
---
# Source: pecan/charts/betydb/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pecan-betydb
  labels:
    app.kubernetes.io/name: betydb
    helm.sh/chart: betydb-0.5.4
    app.kubernetes.io/instance: pecan
    app.kubernetes.io/version: "5.4.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: betydb
      app.kubernetes.io/instance: pecan
  template:
    metadata:
      labels:
        app.kubernetes.io/name: betydb
        app.kubernetes.io/instance: pecan
    spec:
      serviceAccountName: pecan-betydb
      initContainers:
        - name: check-postgresql
          image: "ncsa/checks:1.0.1"
          imagePullPolicy: IfNotPresent
          env:
            - name: PGHOST
              value: "pecan-postgresql"
            - name: PGPORT
              value: "5432"
            - name: PGUSER
              value: "postgres"
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-postgresql
                  key: postgresql-password
            - name: PGDATABASE
              value: "bety"
            - name: PG_TABLE
              value: "sessions"
      containers:
        - name: betydb
          image: "pecan/bety:5.4.1"
          imagePullPolicy: IfNotPresent
          ports:
            - name: bety
              containerPort: 8000
              protocol: TCP
          env:
            - name: UNICORN_WORKER_PROCESSES
              value: "1"
            - name: SECRET_KEY_BASE
              valueFrom:
                secretKeyRef:
                  name: pecan-betydb
                  key: secretKey
            - name: RAILS_RELATIVE_URL_ROOT
              value: "/bety"
            - name: RAILS_LOG_TO_STDOUT
              value: "true"
            - name: PGHOST
              value: "pecan-postgresql"
            - name: PGPORT
              value: "5432"
            - name: PGUSER
              value: "postgres"
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-postgresql
                  key: postgresql-password
            - name: BETYUSER
              value: "bety"
            - name: BETYPASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-betydb
                  key: betyPassword
            - name: BETYDATABASE
              value: "bety"
            - name: LOCAL_SERVER
              value: "99"
            - name: REMOTE_SERVERS
              value: "0, 1, 2, 5"
          # startupProbe:
          #   httpGet:
          #     path: /bety/
          #     port: bety
          #   failureThreshold: 30
          #   periodSeconds: 10
          livenessProbe:
            tcpSocket:
              port: bety
            initialDelaySeconds: 60
          readinessProbe:
            httpGet:
              path: /bety/
              port: bety
          resources:
            {}
---
# Source: pecan/templates/docs/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pecan-docs
  labels:
    app.kubernetes.io/name: pecan
    helm.sh/chart: pecan-0.6.2
    app.kubernetes.io/instance: pecan
    app.kubernetes.io/version: "1.7.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pecan-docs
      app.kubernetes.io/instance: pecan
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pecan-docs
        app.kubernetes.io/instance: pecan
    spec:
      containers:
        - name: pecan
          image: "pecan/docs:1.7.2"
          imagePullPolicy: IfNotPresent
          ports:
            - name: pecan-docs
              containerPort: 80
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: pecan-docs
          readinessProbe:
            httpGet:
              path: /
              port: pecan-docs
          resources:
            {}
---
# Source: pecan/templates/executor/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pecan-executor
  labels:
    app.kubernetes.io/name: pecan
    helm.sh/chart: pecan-0.6.2
    app.kubernetes.io/instance: pecan
    app.kubernetes.io/version: "1.7.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pecan-executor
      app.kubernetes.io/instance: pecan
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pecan-executor
        app.kubernetes.io/instance: pecan
    spec:
      nodeName: wrk-21
      initContainers:
        - name: check-rabbitmq
          image: "ncsa/checks:1.0.1"
          imagePullPolicy: IfNotPresent
          env:
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_URI
              value: "amqp://guest:$(RABBITMQ_PASSWORD)@pecan-rabbitmq/%2F"
        - name: check-postgresql
          image: "ncsa/checks:1.0.1"
          imagePullPolicy: IfNotPresent
          env:
            - name: PGHOST
              value: "pecan-postgresql"
            - name: PGPORT
              value: "5432"
            - name: PGUSER
              value: "postgres"
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-postgresql
                  key: postgresql-password
            - name: BETYUSER
              value: "bety"
            - name: BETYPASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-betydb
                  key: betyPassword
            - name: BETYDATABASE
              value: "bety"
            - name: PGDATABASE
              value: "bety"
            - name: PG_TABLE
              value: "yields"
      containers:
        - name: pecan
          image: "pecan/executor:1.7.2"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: data
              mountPath: /data
          env:
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_URI
              value: "amqp://guest:$(RABBITMQ_PASSWORD)@pecan-rabbitmq/%2F"
            - name: PGHOST
              value: "pecan-postgresql"
            - name: PGPORT
              value: "5432"
            - name: PGUSER
              value: "postgres"
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-postgresql
                  key: postgresql-password
            - name: BETYUSER
              value: "bety"
            - name: BETYPASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-betydb
                  key: betyPassword
            - name: BETYDATABASE
              value: "bety"
            - name: NAME
              value: demo
            - name: FQDN
              value: "pecan.localhost"
            - name: SECRET_KEY_BASE
              valueFrom:
                secretKeyRef:
                  name: pecan-betydb
                  key: secretKey
          resources:
            {}
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: pecan-data
---
# Source: pecan/templates/models/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pecan-model-biocro-0-95
  labels:
    app.kubernetes.io/name: pecan
    helm.sh/chart: pecan-0.6.2
    app.kubernetes.io/instance: pecan
    app.kubernetes.io/version: "1.7.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pecan-model-biocro-0-95
      app.kubernetes.io/instance: pecan
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pecan-model-biocro-0-95
        app.kubernetes.io/instance: pecan
    spec:
      nodeName: wrk-21
      initContainers:
        - name: check-rabbitmq
          image: "ncsa/checks:1.0.1"
          imagePullPolicy: IfNotPresent
          env:

            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_URI
              value: "amqp://guest:$(RABBITMQ_PASSWORD)@pecan-rabbitmq/%2F"
      containers:
        - name: pecan-model-biocro-0-95
          image: "pecan/model-biocro-0.95:1.7.2"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: data
              mountPath: /data
          env:

            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_URI
              value: "amqp://guest:$(RABBITMQ_PASSWORD)@pecan-rabbitmq/%2F"
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: pecan-data
---
# Source: pecan/templates/models/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pecan-model-ed2-2-2-0
  labels:
    app.kubernetes.io/name: pecan
    helm.sh/chart: pecan-0.6.2
    app.kubernetes.io/instance: pecan
    app.kubernetes.io/version: "1.7.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pecan-model-ed2-2-2-0
      app.kubernetes.io/instance: pecan
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pecan-model-ed2-2-2-0
        app.kubernetes.io/instance: pecan
    spec:
      nodeName: wrk-21
      initContainers:
        - name: check-rabbitmq
          image: "ncsa/checks:1.0.1"
          imagePullPolicy: IfNotPresent
          env:

            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_URI
              value: "amqp://guest:$(RABBITMQ_PASSWORD)@pecan-rabbitmq/%2F"
      containers:
        - name: pecan-model-ed2-2-2-0
          image: "pecan/model-ed2-2.2.0:1.7.2"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: data
              mountPath: /data
          env:

            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_URI
              value: "amqp://guest:$(RABBITMQ_PASSWORD)@pecan-rabbitmq/%2F"
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: pecan-data
---
# Source: pecan/templates/models/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pecan-model-maespa-git
  labels:
    app.kubernetes.io/name: pecan
    helm.sh/chart: pecan-0.6.2
    app.kubernetes.io/instance: pecan
    app.kubernetes.io/version: "1.7.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pecan-model-maespa-git
      app.kubernetes.io/instance: pecan
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pecan-model-maespa-git
        app.kubernetes.io/instance: pecan
    spec:
      nodeName: wrk-21
      initContainers:
        - name: check-rabbitmq
          image: "ncsa/checks:1.0.1"
          imagePullPolicy: IfNotPresent
          env:

            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_URI
              value: "amqp://guest:$(RABBITMQ_PASSWORD)@pecan-rabbitmq/%2F"
      containers:
        - name: pecan-model-maespa-git
          image: "pecan/model-maespa-git:1.7.2"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: data
              mountPath: /data
          env:

            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_URI
              value: "amqp://guest:$(RABBITMQ_PASSWORD)@pecan-rabbitmq/%2F"
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: pecan-data
---
# Source: pecan/templates/models/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pecan-model-sipnet-136
  labels:
    app.kubernetes.io/name: pecan
    helm.sh/chart: pecan-0.6.2
    app.kubernetes.io/instance: pecan
    app.kubernetes.io/version: "1.7.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pecan-model-sipnet-136
      app.kubernetes.io/instance: pecan
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pecan-model-sipnet-136
        app.kubernetes.io/instance: pecan
    spec:
      nodeName: wrk-21
      initContainers:
        - name: check-rabbitmq
          image: "ncsa/checks:1.0.1"
          imagePullPolicy: IfNotPresent
          env:

            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_URI
              value: "amqp://guest:$(RABBITMQ_PASSWORD)@pecan-rabbitmq/%2F"
      containers:
        - name: pecan-model-sipnet-136
          image: "pecan/model-sipnet-r136:1.7.2"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: data
              mountPath: /data
          env:

            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_URI
              value: "amqp://guest:$(RABBITMQ_PASSWORD)@pecan-rabbitmq/%2F"
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: pecan-data
---
# Source: pecan/templates/models/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pecan-model-sipnet-git
  labels:
    app.kubernetes.io/name: pecan
    helm.sh/chart: pecan-0.6.2
    app.kubernetes.io/instance: pecan
    app.kubernetes.io/version: "1.7.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pecan-model-sipnet-git
      app.kubernetes.io/instance: pecan
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pecan-model-sipnet-git
        app.kubernetes.io/instance: pecan
    spec:
      nodeName: wrk-21
      initContainers:
        - name: check-rabbitmq
          image: "ncsa/checks:1.0.1"
          imagePullPolicy: IfNotPresent
          env:

            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_URI
              value: "amqp://guest:$(RABBITMQ_PASSWORD)@pecan-rabbitmq/%2F"
      containers:
        - name: pecan-model-sipnet-git
          image: "pecan/model-sipnet-git:1.7.2"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: data
              mountPath: /data
          env:

            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_URI
              value: "amqp://guest:$(RABBITMQ_PASSWORD)@pecan-rabbitmq/%2F"
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: pecan-data
---
# Source: pecan/templates/monitor/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pecan-monitor
  labels:
    app.kubernetes.io/name: pecan
    helm.sh/chart: pecan-0.6.2
    app.kubernetes.io/instance: pecan
    app.kubernetes.io/version: "1.7.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas:
  selector:
    matchLabels:
      app.kubernetes.io/name: pecan-monitor
      app.kubernetes.io/instance: pecan
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pecan-monitor
        app.kubernetes.io/instance: pecan
    spec:
      initContainers:
        - name: check-rabbitmq
          image: "ncsa/checks:1.0.1"
          imagePullPolicy: IfNotPresent
          env:
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_URI
              value: "amqp://guest:$(RABBITMQ_PASSWORD)@pecan-rabbitmq/%2F"
        - name: check-postgresql
          image: "ncsa/checks:1.0.1"
          imagePullPolicy: IfNotPresent
          env:
            - name: PGHOST
              value: "pecan-postgresql"
            - name: PGPORT
              value: "5432"
            - name: PGUSER
              value: "postgres"
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-postgresql
                  key: postgresql-password
            - name: BETYUSER
              value: "bety"
            - name: BETYPASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-betydb
                  key: betyPassword
            - name: BETYDATABASE
              value: "bety"
            - name: PGDATABASE
              value: "bety"
            - name: PG_TABLE
              value: "yields"
      containers:
        - name: pecan
          image: "pecan/monitor:1.7.2"
          imagePullPolicy: IfNotPresent
          env:
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_URI
              value: "amqp://guest:$(RABBITMQ_PASSWORD)@pecan-rabbitmq/%2F"
            - name: PGHOST
              value: "pecan-postgresql"
            - name: PGPORT
              value: "5432"
            - name: PGUSER
              value: "postgres"
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-postgresql
                  key: postgresql-password
            - name: BETYUSER
              value: "bety"
            - name: BETYPASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-betydb
                  key: betyPassword
            - name: BETYDATABASE
              value: "bety"
            - name: NAME
              value: demo
            - name: FQDN
              value: "pecan.localhost"
            - name: RABBITMQ_MGMT_PATH
              value: "/"
          ports:
            - name: pecan-monitor
              containerPort: 9999
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: pecan-monitor
          readinessProbe:
            httpGet:
              path: /monitor/
              port: pecan-monitor
          resources:
            {}
---
# Source: pecan/templates/web/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pecan-web
  labels:
    app.kubernetes.io/name: pecan
    helm.sh/chart: pecan-0.6.2
    app.kubernetes.io/instance: pecan
    app.kubernetes.io/version: "1.7.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pecan-web
      app.kubernetes.io/instance: pecan
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pecan-web
        app.kubernetes.io/instance: pecan
    spec:
      nodeName: wrk-21
      initContainers:
        - name: check-rabbitmq
          image: "ncsa/checks:1.0.1"
          imagePullPolicy: IfNotPresent
          env:
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_URI
              value: "amqp://guest:$(RABBITMQ_PASSWORD)@pecan-rabbitmq/%2F"
        - name: check-postgresql
          image: "ncsa/checks:1.0.1"
          imagePullPolicy: IfNotPresent
          env:
            - name: PGHOST
              value: "pecan-postgresql"
            - name: PGPORT
              value: "5432"
            - name: PGUSER
              value: "postgres"
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-postgresql
                  key: postgresql-password
            - name: BETYUSER
              value: "bety"
            - name: BETYPASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-betydb
                  key: betyPassword
            - name: BETYDATABASE
              value: "bety"
            - name: PGDATABASE
              value: "bety"
            - name: PG_TABLE
              value: "yields"
        - name: check-betydb
          image: "ncsa/checks:1.0.1"
          imagePullPolicy: IfNotPresent
          env:
            - name: BETYDBURL
              value: "http://pecan-betydb:8000/bety/"
      containers:
        - name: pecan
          image: "pecan/web:1.7.2"
          imagePullPolicy: IfNotPresent
          ports:
            - name: pecan-web
              containerPort: 8080
              protocol: TCP
          volumeMounts:
            - name: data
              mountPath: /data
          env:
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_URI
              value: "amqp://guest:$(RABBITMQ_PASSWORD)@pecan-rabbitmq/%2F"
            - name: PGHOST
              value: "pecan-postgresql"
            - name: PGPORT
              value: "5432"
            - name: PGUSER
              value: "postgres"
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-postgresql
                  key: postgresql-password
            - name: BETYUSER
              value: "bety"
            - name: BETYPASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-betydb
                  key: betyPassword
            - name: BETYDATABASE
              value: "bety"
            - name: NAME
              value: demo
            - name: FQDN
              value: "pecan.localhost"
            - name: SECRET_KEY_BASE
              valueFrom:
                secretKeyRef:
                  name: pecan-betydb
                  key: secretKey
          livenessProbe:
            tcpSocket:
              port: pecan-web
          readinessProbe:
            httpGet:
              path: //pecan/
              port: pecan-web
          resources:
            {}
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: pecan-data
---
# Source: pecan/charts/betydb/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pecan-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.9.9
    release: "pecan"
    heritage: "Helm"
  annotations:
spec:
  serviceName: pecan-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: postgresql
      release: "pecan"
      role: master
  template:
    metadata:
      name: pecan-postgresql
      labels:
        app: postgresql
        chart: postgresql-8.9.9
        release: "pecan"
        heritage: "Helm"
        role: master
    spec:
      serviceAccountName: pecan-postgresql
      securityContext:
        runAsUser: 1001
        runAsNonRoot: true
        fsGroup: 1001
      containers:
        - name: pecan-postgresql
          image: docker.io/bitnami/postgresql:11.8.0-debian-10-r4
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-postgresql
                  key: postgresql-password
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 300
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath:
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "20Gi"
---
# Source: pecan/charts/rabbitmq/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pecan-rabbitmq
  namespace: software-application-innovation-lab-sail-projects-fcd6dfa
  labels:
    app: rabbitmq
    chart: rabbitmq-6.28.1
    release: "pecan"
    heritage: "Helm"
spec:
  serviceName: pecan-rabbitmq-headless
  podManagementPolicy: OrderedReady
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: rabbitmq
      release: "pecan"
  template:
    metadata:
      labels:
        app: rabbitmq
        release: "pecan"
        chart: rabbitmq-6.28.1
      annotations:
        checksum/secret: 65f53b368920023ee7717bc24218d78d429ff69c2078b1e2ba0ebc08b7982bc9
    spec:
      nodeName: wrk-7
      securityContext:
        runAsUser: 1001
        runAsNonRoot: true
        fsGroup: 1001
      serviceAccountName: pecan-rabbitmq
      terminationGracePeriodSeconds: 10
      containers:
        - name: rabbitmq
          image: docker.io/bitnami/rabbitmq:3.8.5-debian-10-r3
          imagePullPolicy: "IfNotPresent"
          command:
            - bash
            - -ec
            - |
               mkdir -p /opt/bitnami/rabbitmq/.rabbitmq/
               mkdir -p /opt/bitnami/rabbitmq/etc/rabbitmq/
               touch /opt/bitnami/rabbitmq/var/lib/rabbitmq/.start
               #persist the erlang cookie in both places for server and cli tools
               echo $RABBITMQ_ERL_COOKIE > /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie
               cp /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie /opt/bitnami/rabbitmq/.rabbitmq/
               #change permission so only the user has access to the cookie file
               chmod 600 /opt/bitnami/rabbitmq/.rabbitmq/.erlang.cookie /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie
               #copy the mounted configuration to both places
               cp  /opt/bitnami/rabbitmq/conf/* /opt/bitnami/rabbitmq/etc/rabbitmq
               # Apply resources limits
               ulimit -n "${RABBITMQ_ULIMIT_NOFILES}"
               #replace the default password that is generated
               sed -i "/CHANGEME/cdefault_pass=${RABBITMQ_PASSWORD//\\/\\\\}" /opt/bitnami/rabbitmq/etc/rabbitmq/rabbitmq.conf
               exec rabbitmq-server
          volumeMounts:
            - name: config-volume
              mountPath: /opt/bitnami/rabbitmq/conf
            - name: healthchecks
              mountPath: /usr/local/sbin/rabbitmq-api-check
              subPath: rabbitmq-api-check
            - name: healthchecks
              mountPath: /usr/local/sbin/rabbitmq-health-check
              subPath: rabbitmq-health-check
            - name: data
              mountPath: "/opt/bitnami/rabbitmq/var/lib/rabbitmq"
          ports:
            - name: epmd
              containerPort: 4369
            - name: amqp
              containerPort: 5672
            - name: dist
              containerPort: 25672
            - name: stats
              containerPort: 15672
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - rabbitmq-api-check "http://guest:$RABBITMQ_PASSWORD@127.0.0.1:15672/api/healthchecks/node" '{"status":"ok"}'
            initialDelaySeconds: 120
            timeoutSeconds: 20
            periodSeconds: 30
            failureThreshold: 6
            successThreshold: 1
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - rabbitmq-health-check "http://guest:$RABBITMQ_PASSWORD@127.0.0.1:15672/api/healthchecks/node" '{"status":"ok"}'
            initialDelaySeconds: 10
            timeoutSeconds: 20
            periodSeconds: 30
            failureThreshold: 3
            successThreshold: 1
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: "pecan-rabbitmq-headless"
            - name: K8S_ADDRESS_TYPE
              value: hostname
            - name: RABBITMQ_NODENAME
              value: "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: K8S_HOSTNAME_SUFFIX
              value: ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: RABBITMQ_LOGS
              value: "-"
            - name: RABBITMQ_ULIMIT_NOFILES
              value: "65536"
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: RABBITMQ_ERL_COOKIE
              valueFrom:
                secretKeyRef:
                  name: pecan-rabbitmq
                  key: rabbitmq-erlang-cookie
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-rabbitmq
                  key: rabbitmq-password
      volumes:
        - name: config-volume
          configMap:
            name: pecan-rabbitmq-config
            items:
              - key: rabbitmq.conf
                path: rabbitmq.conf
              - key: enabled_plugins
                path: enabled_plugins
        - name: healthchecks
          configMap:
            name: pecan-rabbitmq-healthchecks
            items:
              - key: rabbitmq-health-check
                path: rabbitmq-health-check
                mode: 111
              - key: rabbitmq-api-check
                path: rabbitmq-api-check
                mode: 111
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app: rabbitmq
          release: "pecan"
          heritage: "Helm"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: pecan/templates/add-data.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: pecan-load-data
  labels:
    app.kubernetes.io/name: pecan
    helm.sh/chart: pecan-0.6.2
    app.kubernetes.io/instance: pecan
    app.kubernetes.io/version: "1.7.2"
    app.kubernetes.io/managed-by: Helm
spec:
  ttlSecondsAfterFinished: 1
  template:
    metadata:
      name: "pecan"
      labels:
        app.kubernetes.io/name: pecan-load-data
        app.kubernetes.io/instance: pecan
    spec:
      nodeName: wrk-21
      restartPolicy: Never
      initContainers:
        - name: check-postgresql
          image: "ncsa/checks:1.0.1"
          imagePullPolicy: IfNotPresent
          env:
            - name: PGHOST
              value: "pecan-postgresql"
            - name: PGPORT
              value: "5432"
            - name: PGUSER
              value: "postgres"
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-postgresql
                  key: postgresql-password
            - name: BETYUSER
              value: "bety"
            - name: BETYPASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-betydb
                  key: betyPassword
            - name: BETYDATABASE
              value: "bety"
            - name: PGDATABASE
              value: "bety"
            - name: PG_TABLE
              value: "yields"
      containers:
        - name: add-data
          image: "pecan/data:1.7.2"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: data
              mountPath: /data
          env:
            - name: PGHOST
              value: "pecan-postgresql"
            - name: PGPORT
              value: "5432"
            - name: PGUSER
              value: "postgres"
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-postgresql
                  key: postgresql-password
            - name: BETYUSER
              value: "bety"
            - name: BETYPASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-betydb
                  key: betyPassword
            - name: BETYDATABASE
              value: "bety"
            - name: NAME
              value: demo
            - name: FQDN
              value: "pecan.localhost"
            - name: PSQL
              value: "psql -d bety -q -t -c"
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: pecan-data
---
# Source: pecan/charts/betydb/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "pecan-betydb-test-connection"
  labels:
    app.kubernetes.io/name: betydb
    helm.sh/chart: betydb-0.5.4
    app.kubernetes.io/instance: pecan
    app.kubernetes.io/version: "5.4.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['pecan-betydb:8000']
  restartPolicy: Never
---
# Source: pecan/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "pecan-test-connection"
  labels:
    app.kubernetes.io/name: pecan
    helm.sh/chart: pecan-0.6.2
    app.kubernetes.io/instance: pecan
    app.kubernetes.io/version: "1.7.2"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['pecan:']
  restartPolicy: Never
---
# Source: pecan/charts/betydb/templates/hooks/load-db.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: pecan-betydb-load-db
  labels:
    app.kubernetes.io/name: betydb
    helm.sh/chart: betydb-0.5.4
    app.kubernetes.io/instance: pecan
    app.kubernetes.io/version: "5.4.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": "post-install"
    "helm.sh/hook-delete-policy": "pre-delete"
    "helm.sh/hook-weight": "5"
spec:
  template:
    metadata:
      name: betydb-load-db
      labels:
        app.kubernetes.io/name: betydb
        helm.sh/chart: betydb-0.5.4
        app.kubernetes.io/instance: pecan
        app.kubernetes.io/version: "5.4.1"
        app.kubernetes.io/managed-by: Helm
    spec:
      restartPolicy: Never
      initContainers:
        - name: check-postgresql
          image: "ncsa/checks:1.0.1"
          imagePullPolicy: IfNotPresent
          env:
            - name: PGHOST
              value: "pecan-postgresql"
            - name: PGPORT
              value: "5432"
            - name: PGUSER
              value: "postgres"
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-postgresql
                  key: postgresql-password
      containers:
        - name: bety-init
          image: "pecan/db:latest"
          imagePullPolicy: Always
          env:
            - name: PGHOST
              value: "pecan-postgresql"
            - name: PGPORT
              value: "5432"
            - name: PGUSER
              value: "postgres"
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-postgresql
                  key: postgresql-password
            - name: BETYUSER
              value: "bety"
            - name: BETYPASSWORD
              valueFrom:
                secretKeyRef:
                  name: pecan-betydb
                  key: betyPassword
            - name: BETYDATABASE
              value: "bety"
            - name: LOCAL_SERVER
              value: "99"
            - name: REMOTE_SERVERS
              value: "0, 1, 2, 5"
